# На позиционные аргументы

#Напишите функцию greet(name, city), которая принимает имя и город и
# возвращает строку приветствия вида "Привет, [имя]! Как погода в [город]?".

# Напишите функцию rectangle_area(width, height), 
# которая вычисляет и возвращает площадь прямоугольника.

# Напишите функцию join_with_separator(str1, str2, separator), 
# которая объединяет две строки через указанный разделитель.

# Напишите функцию is_in_range(number, min_val, max_val), которая возвращает True,
# если число number находится в диапазоне 
# от min_val до max_val (включительно), и False в противном случае.

# Напишите функцию find_in_slice(data, element, start, end), которая
# ищет element в списке data только в срезе от start до end (не включая end).
# Если элемент найден, функция должна вернуть его индекс в исходном списке, иначе — -1.

# На именованные аргументы
# Напишите функцию create_user_profile(name, city="Не указан"), 
# которая возвращает строку с профилем. Город является необязательным параметром.

# Напишите функцию power(base, exponent=2), которая возводит число base в степень exponent.
#  По умолчанию степень равна 2 (возведение в квадрат).

# Напишите функцию format_header(text, level=1, char="=") 
# которая создает заголовок. level — количество строк из символов char до и после текста.
# Длина строки из символов = длине текста

# Пример вывода
# format_header("Заголовок", level=1, char="=")
# =========
# Заголовок
# =========

def format_header(text, level=1, char="="):
    line = char * len(text) #'========='
    header_lines = [line] * level #['=========', '=========']
    final_line = '\n'.join(header_lines) #"=========\n========="
    return final_line + f"\n{text}\n" + final_line

print(format_header("Заголовок", 3, "_"))

# Задача с пометкой для самостоятельного изучения
# Напишите функцию create_html_tag(tag, content, style=None, id_name=None), 
# которая создает строку с HTML-тегом. Атрибуты style и id_name необязательны.
# <p> Простой параграф </p>
# <div id="main-block">Блок с ID</div>
# <span style="color: red;">Цветной текст</span>

# Напишите функцию для расчета ежемесячного платежа по кредиту. 
# Формула аннуитетного платежа: 
# Платеж = Сумма * (Ставка * (1 + Ставка)^Срок) / ((1 + Ставка)^Срок - 1).
# Установите годовую ставку по умолчанию 10% (0.1) и срок в годах 5 лет.

# Задачи на *args

# Напишите функцию sum_all(*numbers), которая принимает любое количество чисел и 
# возвращает их сумму.

# Напишите функцию find_longest_word(*words), которая принимает любое количество строк 
# и возвращает самую длинную из них.

# Напишите функцию smart_join(separator, *items), которая объединяет все items в одну строку,
#  используя separator между ними. Первый аргумент — обязательный.
# Используйте функцию высшего порядка внутри функции (подсказка)

# Напишите функцию average_numbers(*args), которая принимает любое количество аргументов
#  разных типов и вычисляет среднее арифметическое только для числовых аргументов
#  (int или float).

# Задачи на **kwargs

# Напишите функцию print_attributes(**kwargs), которая принимает любые именованные
#  аргументы и выводит их в формате "ключ: значение".

# Напишите функцию create_filtered_dict(allowed_keys, **kwargs), которая создает словарь 
# только из тех kwargs, чьи ключи есть в списке allowed_keys.

# Напишите функцию update_config(config, **kwargs), которая принимает словарь config
#  и обновляет его значениями из kwargs. Функция должна возвращать обновленный словарь.
# Внимательно отнеситесь к копированию объекта.(подсказка)
# Пример использования:
# base_config = {"host": "localhost", "port": 8080, "debug": False}
# new_config = update_config(base_config, port=9000, debug=True, user="admin")

# print(f"Исходный конфиг: {base_config}")
# print(f"Обновленный конфиг: {new_config}")
# # Вывод:
# # Исходный конфиг: {'host': 'localhost', 'port': 8080, 'debug': False}
# # Обновленный конфиг: {'host': 'localhost', 'port': 9000, 'debug': True, 'user': 'admin'}

# Напишите функцию build_where_clause(**conditions) для генерации части WHERE SQL-запроса.
#  Функция должна принимать условия в виде ключ=значение и объединять их через AND.
#  Значения-строки должны быть в одинарных кавычках.

# # Пример использования:
# query_part = build_where_clause(user_id=101, status="active", is_verified=True)
# print(query_part)
# Вывод: WHERE user_id = 101 AND status = 'active' AND is_verified = True

# Дан список словарей с информацией о пользователях. Отсортируйте его по возрасту (age)
#  с помощью функции sorted и лямбда-функции.
# users = [
#     {"name": "Иван", "age": 30},
#     {"name": "Мария", "age": 25},
#     {"name": "Петр", "age": 42},
# ]

# Дан список чисел. Используя filter и лямбда-функцию, создайте новый список, 
# содержащий только четные числа, которые больше 10.
